import Head from "next/head";
import "@mantine/core/styles.css";
import { Geist, Geist_Mono } from "next/font/google";
import {
  ActionIcon,
  Affix,
  Box,
  Button,
  Card,
  Container,
  Divider,
  Flex,
  Grid,
  Group,
  List,
  MantineProvider,
  Modal,
  Popover,
  Text,
  TextInput,
  ThemeIcon,
  Title,
  Transition,
} from "@mantine/core";
import { RiAddLargeLine, RiSubtractFill, RiArrowUpLine } from "react-icons/ri";
import { useEffect, useState } from "react";
import Experience from "../components/Experience";
import Education from "../components/Education";
import Certification from "../components/Certification";
import Project from "../components/Project";
import Socials from "../components/Socials";
import ModeSwitcher from "../components/ModeSwitcher";
import { motion } from "framer-motion";
import QuickQuestion from "../components/QuickQuestion";
import Navigator from "../components/Navigator";
import { ColorSchemeScript } from "@mantine/core";

import experience from "@/data/work";
import education from "@/data/education";
import certifications from "@/data/certifications";
import projects from "@/data/projects";
import questions from "@/data/questions";
import styles from "@/styles/Home.module.css";
import { BsFillPlusCircleFill } from "react-icons/bs";
import { FiMoon } from "react-icons/fi";
import { useDisclosure } from "@mantine/hooks";
import IntelligenceMenu from "../components/IntelligenceMenu";
import OrbBackground from "../components/OrbBackground";
import { FaCircleArrowUp, FaX } from "react-icons/fa6";
import { SiOpenai } from "react-icons/si";
import { IoClose } from "react-icons/io5";
import Stats from "../components/Stats";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function Home() {
  const theme = {
    colors: {
      dark: [
        "#e8e8e8", // 0
        "#f7f7f7", // 1
        "#ffffff", // 2
        "#aaaaaa", // 3
        "#323232", // 4
        "#2e2e2e", // 5
        "#000000", // 6
        "#000000", // 7
        "#161616", // 8
        "#d80073", // 9
        "#b4005a", // 10 - extra to ensure minimum required length
        "#a0004e", // 11
        "#8c0042", // 12
        "#780036", // 13
        "#64002a", // 14
      ],
    },
    defaultRadius: "lg",
    fontSizes: {
      xs: "0.75rem",
      sm: "0.875rem",
      md: "1rem",
      lg: "1.125rem",
      xl: "1.25rem",
    },
    lineHeights: {
      md: "1.8rem",
    },
  };

  const [colorScheme, setColorScheme] = useState<"light" | "dark" | "auto">(
    "light"
  );
  const sections = ["about", "experience", "projects"];
  const [activeSection, setActiveSection] = useState("about");
  const [opened, { open, close }] = useDisclosure(true);
  const [educationOpened, setEducationOpened] = useState(false);
  const [certificationsOpened, setCertificationsOpened] = useState(false);

  const [messages, setMessages] = useState([
    { sender: "bot", text: "Hi! How can I help you today?" },
  ]);
  const [input, setInput] = useState("");
  const [chatOpened, setChatOpened] = useState(false);

  useEffect(() => {
    const saved = localStorage.getItem("mantine-color-scheme");
    if (saved === "dark" || saved === "light") setColorScheme(saved);
    else setColorScheme("auto");
  }, []);

  const toggleScheme = () => {
    const next = colorScheme === "dark" ? "light" : "dark";
    setColorScheme(next);
    localStorage.setItem("mantine-color-scheme", next);
  };

  const handleSend = () => {
    if (!input.trim()) return;

    // Add user message
    const newMessages = [...messages, { sender: "user", text: input }];
    setMessages(newMessages);

    // Simulate bot reply
    setTimeout(() => {
      setMessages((prev) => [
        ...prev,
        { sender: "bot", text: "Got it! You said: " + input },
      ]);
    }, 1000);

    setInput("");
  };

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setActiveSection(entry.target.id);
          }
        });
      },
      { root: null, threshold: 0.5 }
    );

    sections.forEach((id) => {
      const el = document.getElementById(id);
      if (el) observer.observe(el);
    });

    return () => observer.disconnect();
  }, [sections, setActiveSection]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MantineProvider
        // theme={{
        //   ...theme,
        // }}
        defaultColorScheme="dark"
      >
        <Container size={1200}>
          <Grid>
            {/* Left Sidebar */}
            <Grid.Col
              component="header"
              span={{ xs: 6, sm: 6, md: 6, lg: 5, xl: 5 }}
              top={0}
              pos="sticky"
              h="100vh"
            >
              <Flex h="80%" direction="column" justify="space-between">
                <Box>
                  <Text className="ai-text" c="#74c0fc" size="2.4rem" fw={400}>
                    Vidarshan
                  </Text>
                  <Title mt="sm" c="gray" size="1.2rem" fw={400}>
                    Software Engineer â€” Web, Mobile, AI & Cloud
                  </Title>
                  <Socials />
                  <Box mt="4rem" component="nav">
                    <List>
                      <List.Item
                        className={activeSection === "about" ? "ai-text" : ""}
                        style={{ fontSize: "1.2rem" }}
                        mb="0.3rem"
                        fw={500}
                      >
                        About
                      </List.Item>
                      <List.Item
                        className={
                          activeSection === "experience" ? "ai-text" : ""
                        }
                        style={{ fontSize: "1.2rem" }}
                        mb="0.3rem"
                        fw={500}
                      >
                        Experience
                      </List.Item>
                      <List.Item
                        className={
                          activeSection === "projects" ? "ai-text" : ""
                        }
                        style={{ fontSize: "1.2rem" }}
                        mb="0.3rem"
                        fw={500}
                      >
                        Projects
                      </List.Item>
                    </List>
                  </Box>
                </Box>
              </Flex>
              <Stats />
            </Grid.Col>

            {/* Right Main Content */}
            <Grid.Col
              span={{ xs: 6, sm: 6, md: 6, lg: 7, xl: 7 }}
              component="main"
            >
              <Box mt="xl">
                {/* About Section */}
                <Box id="about" component="section">
                  <Text>
                    I design and build digital products that make work simpler,
                    smarter, and more enjoyable. With nearly four years of
                    software engineering experience, I create solutions that
                    elevate user experiences and drive real results.
                  </Text>
                  <Text mt="lg">
                    Curious by nature and driven by impact, I explore emerging
                    tech in AI and cloud infrastructure to push products beyond
                    the expected outcomes through smarter automation,
                    personalization, or rock-solid scalability.
                  </Text>

                  <Flex my="sm" align="center" justify="space-between"></Flex>
                  <Title fw={400} order={4}>
                    Certifications
                  </Title>
                  <Grid>
                    {certifications.map((cert, index) => (
                      <Certification key={cert.title} order={index} {...cert} />
                    ))}
                  </Grid>
                  <Flex my="sm" align="center" justify="flex-end">
                    <BsFillPlusCircleFill
                      cursor="pointer"
                      size="1.4rem"
                      onClick={() => setEducationOpened(!educationOpened)}
                      color={educationOpened ? "gray" : "white"}
                      style={{
                        display: "inline-block",
                        cursor: "pointer",
                        transition: "transform .9s ease",
                        transform: educationOpened
                          ? "rotate(45deg)"
                          : "rotate(360deg)",
                      }}
                    />
                  </Flex>
                  {educationOpened && (
                    <Grid>
                      {education.map((edu) => (
                        <Education key={edu.title} {...edu} />
                      ))}
                    </Grid>
                  )}
                </Box>

                {/* Experience Section */}
                <Box id="experience" component="section">
                  {experience.map(({ company, jobs, link }) => (
                    <Experience
                      key={company}
                      jobs={jobs}
                      company={company}
                      link={link}
                    />
                  ))}
                </Box>

                {/* Projects Section */}
                <Box id="projects" component="section">
                  <Text>Projects</Text>
                  {projects.map((project) => (
                    <Project key={project.name} {...project} />
                  ))}
                </Box>
              </Box>
            </Grid.Col>
          </Grid>
        </Container>

        <Affix
          position={{ bottom: 20, left: "50%" }}
          style={{ transform: "translateX(-50%)" }}
        >
          <IntelligenceMenu />
        </Affix>
      </MantineProvider>
    </>
  );
}
