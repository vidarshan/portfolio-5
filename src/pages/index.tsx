import Head from "next/head";
import "@mantine/core/styles.css";
import { Geist, Geist_Mono } from "next/font/google";
import {
  ActionIcon,
  Affix,
  Box,
  Button,
  Container,
  Flex,
  Grid,
  List,
  MantineProvider,
  Modal,
  Popover,
  Text,
  TextInput,
  Title,
  Transition,
} from "@mantine/core";
import { RiAddLargeLine, RiSubtractFill, RiArrowUpLine } from "react-icons/ri";
import { useEffect, useState } from "react";
import Experience from "./components/Experience";
import Education from "./components/Education";
import Certification from "./components/Certification";
import Project from "./components/Project";
import Socials from "./components/Socials";
import ModeSwitcher from "./components/ModeSwitcher";
import { motion } from "framer-motion";
import QuickQuestion from "./components/QuickQuestion";
import Navigator from "./components/Navigator";
import { ColorSchemeScript } from "@mantine/core";

import experience from "@/pages/data/work";
import education from "@/pages/data/education";
import certifications from "@/pages/data/certifications";
import projects from "@/pages/data/projects";
import questions from "@/pages/data/questions";
import styles from "@/styles/Home.module.css";
import { BsFillPlusCircleFill } from "react-icons/bs";
import { FiMoon } from "react-icons/fi";
import { useDisclosure } from "@mantine/hooks";
import IntelligenceMenu from "./components/IntelligenceMenu";
import OrbBackground from "./components/OrbBackground";
import { FaCircleArrowUp } from "react-icons/fa6";
import { SiOpenai } from "react-icons/si";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function Home() {
  const theme = {
    colors: {
      dark: [
        "#e8e8e8",
        "#f7f7f7",
        "#ffffff",
        "#aaaaaa",
        "#323232",
        "#2e2e2e",
        "#000000",
        "#000000",
        "#161616",
        "#d80073",
      ],
    },
    defaultRadius: "lg",
    fontSizes: {
      xs: "0.75rem",
      sm: "0.875rem",
      md: "1rem",
      lg: "1.125rem",
      xl: "1.25rem",
    },
    lineHeights: {
      md: "1.8rem",
    },
  };

  const [colorScheme, setColorScheme] = useState<"light" | "dark" | "auto">(
    "light"
  );
  const sections = ["about", "experience", "projects"];
  const [mode, setMode] = useState("web");
  const [activeSection, setActiveSection] = useState("about");
  const [opened, { open, close }] = useDisclosure(true);
  const [educationOpened, setEducationOpened] = useState(false);
  const [certificationsOpened, setCertificationsOpened] = useState(false);

  const [messages, setMessages] = useState([
    { sender: "bot", text: "Hi! How can I help you today?" },
  ]);
  const [input, setInput] = useState("");
  const [chatOpened, setChatOpened] = useState(false);

  useEffect(() => {
    const saved = localStorage.getItem("mantine-color-scheme");
    if (saved === "dark" || saved === "light") setColorScheme(saved);
    else setColorScheme("auto");
  }, []);

  const toggleScheme = () => {
    const next = colorScheme === "dark" ? "light" : "dark";
    setColorScheme(next);
    localStorage.setItem("mantine-color-scheme", next);
  };

  const handleSend = () => {
    if (!input.trim()) return;

    // Add user message
    const newMessages = [...messages, { sender: "user", text: input }];
    setMessages(newMessages);

    // Simulate bot reply
    setTimeout(() => {
      setMessages((prev) => [
        ...prev,
        { sender: "bot", text: "Got it! You said: " + input },
      ]);
    }, 1000);

    setInput("");
  };

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setActiveSection(entry.target.id);
          }
        });
      },
      { root: null, threshold: 0.5 }
    );

    sections.forEach((id) => {
      const el = document.getElementById(id);
      if (el) observer.observe(el);
    });

    return () => observer.disconnect();
  }, [sections, setActiveSection]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MantineProvider
        theme={{
          ...theme,
        }}
        defaultColorScheme="light"
      >
        <Container size={1200}>
          <Grid>
            {/* Left Sidebar */}
            <Grid.Col
              component="header"
              span={{ xs: 6, sm: 6, md: 6, lg: 5, xl: 5 }}
              top={0}
              pos="sticky"
              h="100vh"
            >
              <Flex mt="xl" h="80%" direction="column" justify="space-between">
                <Box>
                  <Text className="ai-text" c="#74c0fc" size="2.4rem" fw={400}>
                    Vidarshan
                  </Text>
                  <Title mt="sm" c="gray" size="1.2rem" fw={400}>
                    Software Engineer â€” Web, Mobile, AI & Cloud
                  </Title>
                  <Socials />
                  <Box mt="4rem" component="nav">
                    <List>
                      <List.Item
                        className={activeSection === "about" ? "ai-text" : ""}
                        style={{ fontSize: "1.2rem" }}
                        mb="0.3rem"
                        fw={500}
                      >
                        About
                      </List.Item>
                      <List.Item
                        className={
                          activeSection === "experience" ? "ai-text" : ""
                        }
                        style={{ fontSize: "1.2rem" }}
                        mb="0.3rem"
                        fw={500}
                      >
                        Experience
                      </List.Item>
                      <List.Item
                        className={
                          activeSection === "projects" ? "ai-text" : ""
                        }
                        style={{ fontSize: "1.2rem" }}
                        mb="0.3rem"
                        fw={500}
                      >
                        Projects
                      </List.Item>
                    </List>
                  </Box>
                </Box>
                <ModeSwitcher mode={mode} setMode={setMode} />
              </Flex>
            </Grid.Col>

            {/* Right Main Content */}
            <Grid.Col
              span={{ xs: 6, sm: 6, md: 6, lg: 7, xl: 7 }}
              component="main"
            >
              {mode === "web" ? (
                <Box mt="xl">
                  {/* About Section */}
                  <Box id="about" component="section">
                    <Text>
                      I design and build digital products that make work
                      simpler, smarter, and more enjoyable. With nearly four
                      years of software engineering experience, I create
                      solutions that elevate user experiences and drive real
                      results.
                    </Text>
                    <Text mt="lg">
                      Curious by nature and driven by impact, I explore emerging
                      tech in AI and cloud infrastructure to push products
                      beyond the expected outcomes through smarter automation,
                      personalization, or rock-solid scalability.
                    </Text>

                    <Flex my="sm" align="center" justify="space-between"></Flex>

                    <Grid>
                      {certifications.map((cert, index) => (
                        <Certification
                          key={cert.title}
                          order={index}
                          {...cert}
                        />
                      ))}
                    </Grid>
                    <Flex my="sm" align="center" justify="flex-end">
                      <BsFillPlusCircleFill
                        cursor="pointer"
                        size="1.4rem"
                        onClick={() => setEducationOpened(!educationOpened)}
                        color={educationOpened ? "gray" : "white"}
                        style={{
                          display: "inline-block",
                          cursor: "pointer",
                          transition: "transform .9s ease",
                          transform: educationOpened
                            ? "rotate(45deg)"
                            : "rotate(360deg)",
                        }}
                      />
                    </Flex>
                    {educationOpened && (
                      <Grid>
                        {education.map((edu) => (
                          <Education key={edu.title} {...edu} />
                        ))}
                      </Grid>
                    )}
                  </Box>

                  {/* Experience Section */}
                  <Box id="experience" component="section">
                    {experience.map(({ company, jobs, link }) => (
                      <Experience
                        key={company}
                        jobs={jobs}
                        company={company}
                        link={link}
                      />
                    ))}
                  </Box>

                  {/* Projects Section */}
                  <Box id="projects" component="section">
                    <Text>Projects</Text>
                    {projects.map((project) => (
                      <Project key={project.name} {...project} />
                    ))}
                  </Box>
                </Box>
              ) : (
                <IntelligenceMenu />
              )}
            </Grid.Col>
          </Grid>
        </Container>

        <Affix
          position={{ bottom: 20, left: "50%" }}
          style={{ transform: "translateX(-50%)" }}
        >
          <IntelligenceMenu />
          <TextInput
            radius="xl"
            onClick={() => setChatOpened((o) => !o)}
            size="md"
            placeholder="Ask anything about me"
            leftSection={<SiOpenai />}
            rightSection={<FaCircleArrowUp color="lime" />}
            style={{
              width: "100%",
            }}
          />
        </Affix>
        <footer className={styles.footer}></footer>
      </MantineProvider>
    </>
  );
}
